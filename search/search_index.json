{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello, dear","text":""},{"location":"#hello-dear","title":"Hello, dear!","text":""},{"location":"#what-is-this","title":"What is this?","text":"<p> The Cheshire Cat is an open-source framework that allows you to develop intelligent agents on top of many  Large Language Models (LMM). You can develop your custom AI architecture to assist you in a wide range of tasks.</p> <p>The Cheshire Cat embeds a long-term memory system to save the user's input locally  and answer informed by the context of previous conversations.  You can also feed text documents in the Cat's memory system to enrich the agent's contextual information and ask it to  retrieve them further in the conversation. The Cat currently supports <code>.txt</code>, <code>.pdf</code> and <code>.md</code> files.</p> <p>If you want the Cat to solve tailored tasks you can extend its capabilities writing Python plugins to execute custom functions or call external services (e.g. APIs and other models).   </p> <p>If you want to build your custom AI architecture, the Cat can help you:</p> <ul> <li> Language model agnostic</li> <li> Long term memory</li> <li> Can use external tools</li> <li> Can ingest documents (.txt, .pdf)</li> <li> Extendible via plugins in Python</li> <li> 100% dockerized</li> </ul> <p>Don't forget to give the project a star! \u2b50 Thanks again!\ud83d\ude4f</p>"},{"location":"#currently-available-llms","title":"Currently Available LLMs","text":"<p>This is the list of currently supported LMMs:</p> <ul> <li>GPT3</li> <li>ChatGPT</li> <li>Cohere</li> <li>HuggingFace Hub</li> <li>HuggingFace endpoints</li> </ul> <p>Which way to go from here? </p> <p></p> <pre><code>\"Would you tell me, please, which way I ought to go from here?\"\n\"That depends a good deal on where you want to get to,\" said the Cat.\n\"I don't much care where--\" said Alice.\n\"Then it doesn't matter which way you go,\" said the Cat.\n\n(Alice's Adventures in Wonderland - Lewis Carroll)\n</code></pre> <p>Credits</p> <p>Logo image generated with MidJourney, prompted by Edgars Romanovskis</p>"},{"location":"basics/","title":"Basics","text":"<p>The Cheshire Cat is composed of two main parts: the core functionality resides in the <code>/core</code> folder, and the frontend interface is located in the <code>/admin</code> folder. This document will provide an overview of The Cheshire Cat, including its basic functions and how to access them.</p>"},{"location":"basics/#the-cat-core","title":"The Cat Core","text":"<p>The core functionalities of The Cheshire Cat resides in the <code>/core</code> folder. The core exposes all of its APIs via the address <code>localhost:1865/</code>. The program has several endpoints that can be accessed via this address. All of these endpoints are thoroughly documented and can be easily tested using Swagger (available at <code>localhost:1865/docs</code>) or ReDoc (available at <code>localhost:1865/redoc</code>).</p> <p>Examples of some of these endpoints include:</p> <ul> <li><code>/</code> - This endpoint will return the message <code>\"We're all mad here, dear!\"</code> if the cat is functioning properly.</li> <li><code>/ws/</code> - Use this endpoint to start a chat with the cat using a websocket.</li> <li><code>/rabbithole/</code> - This endpoint allows you to send a file (text, markdown or pdf) to the cat, which will then be saved into its memory. This allows you to share information directly with the cat and for it to access it whenever needed.</li> </ul> <p>Interacting with Rabbithole:</p> PythonNode <pre><code>import requests\nurl = 'http://localhost:1865/rabbithole/'\nwith open('alice.txt', 'rb') as f:\nfiles = {\n'file': ('alice.txt', f, 'text/plain')\n}\nheaders = {\n'accept': 'application/json',\n}\nresponse = requests.post(url, headers=headers, files=files)\nprint(response.text)\n</code></pre> <pre><code>const request = require('request');\nconst fs = require('fs');\nconst url = 'http://localhost:1865/rabbithole/';\nconst file = fs.createReadStream('alice.txt');\nconst formData = {\nfile: {\nvalue: file,\noptions: {\nfilename: 'alice.txt',\ncontentType: 'text/plain'\n}\n}\n};\nconst options = {\nurl: url,\nheaders: {\n'accept': 'application/json'\n},\nformData: formData\n};\nrequest.post(options, function(err, res, body) {\nif (err) {\nreturn console.error('Error:', err);\n}\nconsole.log('Body:', body);\n});\n</code></pre>"},{"location":"basics/#the-admin-interface","title":"The Admin Interface","text":"<p>The frontend interface of The Cheshire Cat is located in the <code>admin</code> folder and can be accessed via <code>localhost:3000</code>. This interface provides users with an easy-to-use chat that act as playground and can be used to interact with your application.   </p> <p>All the cat's settings are available under this GUI's <code>Settings</code> menu.</p>"},{"location":"features/","title":"Features","text":"<p>TODO</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#getting-started","title":"Getting started","text":""},{"location":"getting-started/#download","title":"Download","text":"<p>Clone the repository on your machine:</p> <pre><code># Clone the repository\ngit clone https://github.com/pieroit/cheshire-cat.git\n</code></pre>"},{"location":"getting-started/#install","title":"Install","text":"<p>To run the Cheshire Cat, you need to have <code>docker</code> (instructions) and <code>docker-compose</code> (instructions) installed on your system.</p> <ul> <li>Create and API key on the language model provider website  </li> <li>Create an <code>.env</code> file in the cloned repository</li> <li>Start the app with <code>docker-compose up</code> inside the repository</li> <li>Open the app in your browser at <code>localhost:3000</code></li> <li>Configure a LLM in the <code>Settings</code> tab and paste you API key</li> <li>Start chatting</li> </ul> <p>You can also interact via REST API and try out the endpoints on <code>localhost:1865/docs</code></p> <p>The first time you run the <code>docker-compose up</code> command it will take several minutes as docker images occupy some GBs.</p>"},{"location":"getting-started/#quickstart","title":"Quickstart","text":"<p>Here is an example of a quick setup running the <code>gpt3.5-turbo</code> OpenAI model.  </p> <p>Create an API key with <code>+ Create new secret key</code> in your OpenAI personal account, then:</p>"},{"location":"getting-started/#cli-setup","title":"CLI setup","text":"Linux &amp; MacWindows <pre><code># Open the cloned repository\ncd cheshire-cat\n\n# Create empty .env file\ntouch .env\n\n# Run docker containers\ndocker-compose up\n</code></pre> <pre><code># Open the cloned repository\ncd cheshire-cat\n\n# Create empty .env file\ntype null &gt; .env\n\n# Run docker containers\ndocker-compose up\n</code></pre>"},{"location":"getting-started/#gui-setup","title":"GUI setup","text":"<p>When you're done using the Cat, remember to CTRL+c in the terminal and <code>docker-compose down</code>.</p>"},{"location":"getting-started/#update","title":"Update","text":"<p>As the project is still a work in progress, if you want to update it run the following: </p><pre><code># Open the cloned repository\ncd cheshire-cat\n\n# Pull from the main remote repository\ngit pull\n\n# Build again the docker containers\ndocker-compose build --no-cache\n\n# Run docker containers\ndocker-compose up\n</code></pre>"},{"location":"getting-started/#custom-code","title":"Custom code","text":"<p>Warning</p> <p>If you plan to write custom tools, remember to start your folders with two underscores to avoid conflict between the git repository and the local one. Eg. <code>__my_awesome_plugin</code></p>"},{"location":"how-the-cat-works/","title":"How the Cat works","text":""},{"location":"how-the-cat-works/#how-the-cat-works","title":"How the Cat works","text":"<p>The Cheshire Cat is made of many pluggable components that make it fully customizable.</p>"},{"location":"how-the-cat-works/#components","title":"Components","text":"<code>Chat</code> This is the Graphical User Interface (GUI) component that allows you to interact directly with the Cat.  From the GUI, you can also set the language model you want the Cat to run. <code>Rabbit Hole</code> This component handles the ingestion of documents.  Files that are sent down the Rabbit Hole are split into chunks and saved in the Cat's episodic memory to be further retrieved in the conversation.  <code>Large Language Model (LLM)</code> This is one of the core components of the Cheshire Cat framework.  A LLM is a Deep Learning model that's been trained on a huge volume of text data and can perform many types of language tasks. The model takes a text string as input (e.g. the user's prompt) and provides a meaningful answer.  The answer consistency and adequacy is enriched with the context of previous conversations and documents uploaded in the Cat's memory. <code>Embedder</code> The embedder is another Deep Learning model similar to the LLM. Differently, it doesn't perform language tasks. The model takes a text string as input and encodes it in a numerical representation.  This operation allows to represent textual data as vectors and perform geometrical operation on them. For instance, given an input, the embedder is used to retrieve similar sentences from the Cat's memory. <code>Vector Memory</code> As a result of the Embedder encoding, we get a set of vectors that are used to store the Cat's memory in a vector database. Memories store not only the vector representation of the input, but also the time instant and personalized metadata to facilitate and enhance the information retrieval. The Cat embeds two types of vector memories, namely the episodic and declarative memories.  The formers are the things the human said in the past; the latter the documents sent down the Rabbit hole.  <code>Agent</code> This is another core component of the Cheshire Cat framework.  The agent orchestrates the calls that are made to the LLM.  This component allows the Cat to decide which action to take according to the input the user provides.  Possible actions range from holding the conversation to executing complex tasks, chaining predefined or custom tools. <code>Plugins</code> These are functions to extend the Cat's capabilities.  Plugins are a set of tools and hooks  that allow the Agent to achieve complex goals. This component let the Cat assists you with tailored needs."},{"location":"how-the-cat-works/#main-loop","title":"Main loop","text":""},{"location":"plugins/hooks/","title":"Hooks","text":""},{"location":"plugins/hooks/#hooks","title":"Hooks","text":""},{"location":"plugins/hooks/#todo-insert-hook-search","title":"TODO: insert hook search","text":""},{"location":"plugins/plugins/","title":"How to write a plugin","text":""},{"location":"plugins/plugins/#how-to-write-a-plugin","title":"How to write a plugin","text":"<p>To write a plugin just create a new folder in <code>web/cat/plugins/</code>. </p> <p>Warning</p> <p>To avoid conflict between the Cat git and your local folder put two  underscores to make the folder invisible to GitHub. I.e. <code>__myplugin</code>.</p> <p>Add a python file to your plugin folder:</p> <pre><code>\u251c\u2500\u2500 web\n\u2502   \u251c\u2500\u2500 cat\n\u2502   \u2502   \u251c\u2500\u2500 plugins\n|   |   |   \u251c\u2500\u2500 __myplugin\n|   |   |   |   \u251c mypluginfile.py\n</code></pre> <p>Now let's start <code>mypluginfile.py</code> with a little import:</p> <pre><code>from cat.mad_hatter.decorators import tool, hook\n</code></pre> <p>You are now ready to change the Cat's behavior using Tools and Hooks.</p> <p></p>"},{"location":"plugins/plugins/#hooks","title":"Hooks","text":"<p>Hooks let you influence how the Cat runs its internal functionality. More details on hooks here</p>"},{"location":"plugins/plugins/#tools","title":"Tools","text":"<p>Tools let you define custom code that the Cat can use. More details on tools here</p> <p>TODO: the difference is not clear, find better working and simple examples</p>"},{"location":"plugins/tools/","title":"Tools","text":""},{"location":"plugins/tools/#tools","title":"Tools","text":"<p>A Tool allows the Cat to execute custom code during conversation, for example:</p> <ul> <li>communicate with a web service</li> <li>search information in an external database</li> <li>execute math calculations</li> <li>run stuff in the terminal (danger zone)</li> <li>keep track of specific information and do fancy stuff with it</li> <li>your fantasy is the limit!</li> </ul> <p>Tools in the Cheshire Cat are inspired and extend langchain Tools, an elegant Toolformer implementation.</p>"},{"location":"plugins/tools/#your-first-tool","title":"Your first Tool","text":"<p>A Tool is just a python function. In your <code>mypluginfile.py</code> create a new function with the <code>@tool</code> decorator:</p> <pre><code>@tool # (1)\ndef get_the_time(tool_input, cat): # (2)\n\"\"\"Retrieves current time and clock. Input is always None.\"\"\" # (3)\nreturn str(datetime.now()) # (4)\n</code></pre> <ol> <li>Python functions in a plugin only become tools if you use the <code>@tool</code> decorator</li> <li>Every <code>@tool</code> receives two arguments: a string representing the tool input, and the Cat instance. </li> <li>This doc string is necessary, as it will show up in the LLM prompt. It should describe what the tool is useful for and how to prepare inputs, so the LLM can select the tool and input it properly.</li> <li>Always return a string, which goes back to the prompt informing the LLM on the Tool's output.</li> </ol> <p>Let's see all the parts step by step...</p> <p>TODO:</p> <ul> <li>a better example?</li> <li>show how tools are displayed in the prompt and how the LLM selects them</li> <li>more examples with little variations<ul> <li>the tool calls an external service</li> <li>the tool reads/writes a file</li> <li>the input string contains a dictionary (to be parsed with <code>json.loads</code>)</li> <li>the tool manages a conversational form</li> <li><code>@tool(return_direct=True)</code> to let the returned string go straight to the chat</li> <li>show how you can access cat's functionality (memory, llm, embedder, rabbit_hole) from inside a tool</li> <li>what else? dunno</li> </ul> </li> </ul>"},{"location":"tutorials/installation-customization/","title":"Installation and customization","text":"<p>Watch it on YouTube</p>"},{"location":"tutorials/overview/","title":"Overview","text":"<p>Watch it on YouTube</p>"}]}